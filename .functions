.find() {
  find . -iname "*$1*"
}

# just USE AG!
#.grep() {
#  grep -irnw $1 .
#}

.installed() {
   apt list --installed | grep $1
}

.col() {
  awk -v col=$1 '{print $col}'
}

.tds() {
  du -ach
}

.report() {
   sudo whoami;
   file=~/Desktop/report.txt;
   rm -f $file;
   touch $file;

   echo "\nuname -a        ================================================= MAGIC\n" >> $file;
   uname -a >> $file;

   echo "\nlsb_release -a  ================================================= MAGIC\n" >> $file;
   lsb_release -a >> $file;

   echo "\nfree -h         ================================================= MAGIC\n" >> $file;
   free -h >> $file;

   echo "\ndf -H           ================================================= MAGIC\n" >> $file;
   df -H >> $file;

   echo "\nlshw            ================================================= MAGIC\n" >> $file;
   sudo lshw >> $file;

   echo "\nlscpu           ================================================= MAGIC\n" >> $file;
   sudo lscpu >> $file;

   echo "\nlsblk -a        ================================================= MAGIC\n" >> $file;
   sudo lsblk -a >> $file;

   echo "\nlsusb -v        ================================================= MAGIC\n" >> $file;
   sudo lsusb -v >> $file;

   echo "\nlspci -v        ================================================= MAGIC\n" >> $file;
   sudo lspci -v >> $file;

   echo "\nfdisk -l        ================================================= MAGIC\n" >> $file;
   sudo fdisk -l >> $file;
   
}

.kill-from-user() {
   pkill -9 -u `id -u $1`
}

# echo and then copy same text to clipboard     ---------------- GOOD
co () {
  echo $1;
  echo $1 | xclip -selection clipboard;
}

# Curl online manpages and pipe to less
webman () {
	curl http://man.he.net/\?topic\=$1\&section\=all | less
}


# Calls man pages or fallbacks to webman
man()
{
   echo "Fetching man page for $1 ..."

   res=$(/usr/bin/man $1);
   code=$?;

   if [ "$code" -eq "0" ];then
     echo $res | less;
   else
     echo "No man page found on system, using webman:";
     webman $1;
   fi
}

# check ports being used by port param $1 passed
ports2 () {
  sudo netstat -lpn | grep :$1;
}

# grep the history faster
h ()
{
  if [ $1 ] ; then
    history | grep $1;
  else
    echo "pass a param!";
  fi
}

# Creates an archive (*.tar.gz) from given directory.
maketar ()
{
  tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
}

# Create a ZIP archive of a file or folder.
makezip ()
{
  zip -r "${1%%/}.zip" "$1" ;
}

# Shows ps for current user
my_ps () {
  ps $@ -u $USER -o pid,%cpu,%mem,command;
}

## greps my user processes by param
pp () {
  my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"};
}

#open () {
#  nautilus $1 &;
#}

findZombieParent() {
  pstree -p -s $1;
}

encrypt () {
  openssl aes-256-cbc -a < $1 > $1.encrypted;
}

decrypt () {
  openssl aes-256-cbc -a -d < $1 > $1.decrypted;
}

extract() {
 if [ -z "$1" ]; then
  # display usage if no parameters given
  echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
   if [ -f $1 ] ; then
     NAME=${1%.*}
     mkdir $NAME && cd $NAME
     case $1 in
       *.tar.bz2)   tar xvjf ../$1    ;;
       *.tar.gz)    tar xvzf ../$1    ;;
       *.tar.xz)    tar xvJf ../$1    ;;
       *.lzma)      unlzma ../$1      ;;
       *.bz2)       bunzip2 ../$1     ;;
       *.rar)       unrar x -ad ../$1 ;;
       *.gz)        gunzip ../$1      ;;
       *.tar)       tar xvf ../$1     ;;
       *.tbz2)      tar xvjf ../$1    ;;
       *.tgz)       tar xvzf ../$1    ;;
       *.zip)       unzip ../$1       ;;
       *.Z)         uncompress ../$1  ;;
       *.7z)        7z x ../$1        ;;
       *.xz)        unxz ../$1        ;;
       *.exe)       cabextract ../$1  ;;
       *)           echo "extract: '$1' - unknown archive method" ;;
     esac
   else
     echo "$1 - file does not exist"
   fi
 fi
}

function dump-traffic()
{
  sudo tcpdump -i lo0 -s 0 -B 524288 port $1 -w ~/Desktop/DumpFile$1.pcap
}

gwd()
{
   a=`git symbolic-ref HEAD`;
   echo ${a#refs/heads/};
}

function sserver() {
   sudo python -m SimpleHTTPServer $1
}

function ssh-agent(){
  eval `ssh-agent -s`
  ssh-add ~/.ssh/id_rsa
}

# commented:

# For playing videos to chromecast
#play_video () {
#  curl -H "Content-Type: application/json" http://192.168.1.78:8008/apps/YouTube -X POST -d 'v=$1';
#}


# convertToPFX() {
#     openssl pkcs12 -inkey $1 -in $2 -export -out result.pfx
# }

#tsung_test() {
#  tsung -f $1 start
#}

#taurus() {
#  bzt $1
#}

function realpath()
{
	local success=true
	local path="$1"

	# make sure the string isn't empty as that implies something in further logic
	if [ -z "$path" ]; then
		success=false
	else
		# start with the file name (sans the trailing slash)
		path="${path%/}"

		# if we stripped off the trailing slash and were left with nothing, that means we're in the root directory
		if [ -z "$path" ]; then
			path="/"
		fi

		# get the basename of the file (ignoring '.' & '..', because they're really part of the path)
		local file_basename="${path##*/}"
		if [[ ( "$file_basename" = "." ) || ( "$file_basename" = ".." ) ]]; then
			file_basename=""
		fi

		# extracts the directory component of the full path, if it's empty then assume '.' (the current working directory)
		local directory="${path%$file_basename}"
		if [ -z "$directory" ]; then
			directory='.'
		fi

		# attempt to change to the directory
		if ! cd "$directory" &>/dev/null ; then
			success=false
		fi

		if $success; then
			# does the filename exist?
			if [[ ( -n "$file_basename" ) && ( ! -e "$file_basename" ) ]]; then
				success=false
			fi

			# get the absolute path of the current directory & change back to previous directory
			local abs_path="$(pwd -P)"
			cd "-" &>/dev/null

			# Append base filename to absolute path
			if [ "${abs_path}" = "/" ]; then
				abs_path="${abs_path}${file_basename}"
			else
				abs_path="${abs_path}/${file_basename}"
			fi

			# output the absolute path
			echo "$abs_path"
		fi
	fi

	$success
}
